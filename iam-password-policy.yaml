AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation Template to Configure a Strong IAM Password Policy"
Parameters:
  MaxPasswordAge:
    Type: 'Number'
    Description: 'Maximum age for passwords'
    ConstraintDescription: '(90-365 days)'
    MinValue: 90
    MaxValue: 365
    Default: 90
  MinPasswordLength:
    Type: 'Number'
    Description: 'Minimum password length'
    ConstraintDescription: '(8-128 characters)'
    MinValue: 8
    MaxValue: 128
    Default: 14
  PasswordHistory:
    Type: 'Number'
    Description: 'Number of previous passwords to remember'
    ConstraintDescription: '(1-24 passwords)'
    MinValue: 1
    MaxValue: 24
    Default: 24
  RequireLowercaseChars:
    Type: 'String'
    Description: 'Require at least one lowercase character'
    AllowedValues:
    - 'True'
    - 'False'
    Default: 'True'
  RequireNumbers:
    Type: 'String'
    Description: 'Require at least one number'
    AllowedValues:
    - 'True'
    - 'False'
    Default: 'True'
  RequireSymbols:
    Type: 'String'
    Description: 'Require at least one symbol'
    AllowedValues:
    - 'True'
    - 'False'
    Default: 'True'
  RequireUppercaseChars:
    Type: 'String'
    Description: 'Require at least one uppercase character'
    AllowedValues:
    - 'True'
    - 'False'
    Default: 'True'
Resources:
  CustomResourceConfigurePasswordPolicy:
    Type: Custom::PasswordPolicy
    Properties:
      ServiceToken: !GetAtt LambdaPasswordPolicy.Arn
  LambdaPasswordPolicy:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - arm64
      Code:
        ZipFile: |
          import boto3 
          import cfnresponse
          import os
          import sys
          from botocore.exceptions import ClientError 

          EnvMaxPasswordAge = os.environ['MAXPASSWORDAGE']
          EnvMinPasswordLength = os.environ['MINPASSWORDLENGTH']
          EnvRequireUppercaseChars = os.environ['REQUIREUPPERCASECHARS']
          EnvRequireLowercaseChars = os.environ['REQUIRELOWERCASECHARS']
          EnvRequireNumbers = os.environ['REQUIRENUMBERS']
          EnvRequireSymbols = os.environ['REQUIRESYMBOLS']
          EnvPasswordReusePrevention = os.environ['PASSWORDREUSEPREVENTION']

          iam_client = boto3.client('iam') 

          def lambda_handler(event,context): 
              props = event['ResourceProperties'] 
              if (event['RequestType'] == 'Create' or event['RequestType'] == 'Update'): 
                  try: 
                      iam_client.update_account_password_policy(
                          AllowUsersToChangePassword=True,
                          HardExpiry=False,
                          MaxPasswordAge=int(EnvMaxPasswordAge),
                          MinimumPasswordLength=int(EnvMinPasswordLength),
                          RequireLowercaseCharacters=bool(EnvRequireLowercaseChars),
                          RequireNumbers=bool(EnvRequireNumbers),
                          RequireSymbols=bool(EnvRequireSymbols),
                          RequireUppercaseCharacters=bool(EnvRequireUppercaseChars),
                          PasswordReusePrevention=int(EnvPasswordReusePrevention)
                      )  
                  except ClientError as ex: 
                      print(ex.response['Error']['Message']) 
                      print("Response: FAILED") 
                      cfnresponse.send(event, context, cfnresponse.FAILED, ex.response) 

              elif (event['RequestType'] == 'Delete'):        
                  try: 
                      iam_client.delete_account_password_policy()
                  except ClientError as ex: 
                      print(ex.response['Error']['Message']) 
                      print("Respond: FAILED") 
                      
                      cfnresponse.send(event, context, cfnresponse.FAILED, ex.response) 
                  
              print("Response: SUCCESS") 
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}) 
              sys.exit(0) 
      Description: "Lambda Function that is triggered by CloudFormation Custom Resource to set IAM Password Policy"
      FunctionName: Lambda-Configure-Password-Policy
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRolePasswordPolicy.Arn
      Runtime: python3.9
      MemorySize: 128
      Timeout: 60
      Environment: 
        Variables:
          MAXPASSWORDAGE: !Ref MaxPasswordAge
          MINPASSWORDLENGTH: !Ref MinPasswordLength
          REQUIREUPPERCASECHARS: !Ref RequireUppercaseChars
          REQUIRELOWERCASECHARS: !Ref RequireLowercaseChars
          REQUIRENUMBERS: !Ref RequireNumbers
          REQUIRESYMBOLS: !Ref RequireSymbols
          PASSWORDREUSEPREVENTION: !Ref PasswordHistory
  LambdaRolePasswordPolicy:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "IAMPasswordCreatorPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "iam:GetAccountPasswordPolicy"
                  - "iam:UpdateAccountPasswordPolicy"
                  - "iam:DeleteAccountPasswordPolicy"
                Resource: "*"